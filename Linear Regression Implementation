{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "GSCProject2LinearReg.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MicroprocessorX069/Handwriting-comparison/blob/master/Linear%20Regression%20Implementation\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "DkdB_O7JpsuF",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import numpy as np\n",
        "import csv\n",
        "import math\n",
        "import matplotlib.pyplot\n",
        "from matplotlib import pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "cvubigfPV5JO",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## Functions"
      ]
    },
    {
      "metadata": {
        "id": "tvOF154bpsuP",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def GetTargetVector(filePath):\n",
        "    t = []\n",
        "    with open(filePath, 'rU') as f:\n",
        "        reader = csv.reader(f)\n",
        "        i=0\n",
        "        for row in reader: \n",
        "            t.append(int(row[0]))\n",
        "            i+=1\n",
        "    #print(\"Raw Training Generated..\")\n",
        "    return t\n",
        "\n",
        "def GenerateRawData(filePath, IsSynthetic=False):    \n",
        "    dataMatrix = [] \n",
        "    with open(filePath, 'rU') as fi:\n",
        "        reader = csv.reader(fi)\n",
        "        i=0\n",
        "        for row in reader:\n",
        "            dataRow = []\n",
        "            for column in row:\n",
        "                dataRow.append(float(column))\n",
        "            dataMatrix.append(dataRow)   \n",
        "            i+=1\n",
        "    \n",
        "    #if IsSynthetic == False :\n",
        "    #    dataMatrix = np.delete(dataMatrix, [5,6,7,8,9], axis=1)\n",
        "    dataMatrix = np.transpose(dataMatrix)     \n",
        "    #print (\"Data Matrix Generated..\")\n",
        "    return dataMatrix\n",
        "\n",
        "def GenerateTrainingTarget(rawTraining,TrainingPercent = 80):\n",
        "    TrainingLen = int(math.ceil(len(rawTraining)*(TrainingPercent*0.01)))\n",
        "    t           = rawTraining[:TrainingLen]\n",
        "    #print(str(TrainingPercent) + \"% Training Target Generated..\")\n",
        "    return t\n",
        "\n",
        "def GenerateTrainingDataMatrix(rawData, TrainingPercent = 80):\n",
        "    #T_len = int(math.ceil(len(rawData[0])*0.01*TrainingPercent))\n",
        "    T_len=8000\n",
        "    d2 = rawData[:,0:8000]\n",
        "    #print(str(TrainingPercent) + \"% Training Data Generated..\")\n",
        "    return d2\n",
        "\n",
        "def GenerateValData(rawData, ValPercent, TrainingCount): \n",
        "    valSize = int(math.ceil(len(rawData[0])*ValPercent*0.01))\n",
        "    V_End = TrainingCount + valSize\n",
        "    dataMatrix = rawData[:,TrainingCount+1:V_End]\n",
        "    #print (str(ValPercent) + \"% Val Data Generated..\")  \n",
        "    return dataMatrix\n",
        "\n",
        "def GenerateValTargetVector(rawData, ValPercent, TrainingCount): \n",
        "    valSize = int(math.ceil(len(rawData)*ValPercent*0.01))\n",
        "    V_End = TrainingCount + valSize\n",
        "    t =rawData[TrainingCount+1:V_End]\n",
        "    #print (str(ValPercent) + \"% Val Target Data Generated..\")\n",
        "    return t\n",
        "\n",
        "def GenerateBigSigma(Data, MuMatrix,TrainingPercent,IsSynthetic=False):\n",
        "    BigSigma    = np.zeros((len(Data),len(Data)))\n",
        "    DataT       = np.transpose(Data)\n",
        "    TrainingLen = math.ceil(len(DataT)*(TrainingPercent*0.01))        \n",
        "    varVect     = []\n",
        "    for i in range(0,len(DataT[0])):\n",
        "        vct = []\n",
        "        for j in range(0,int(TrainingLen)):\n",
        "            vct.append(Data[i][j])    \n",
        "        varVect.append(np.var(vct))\n",
        "    \n",
        "    for j in range(len(Data)):\n",
        "        BigSigma[j][j] = varVect[j]\n",
        "    if IsSynthetic == True:\n",
        "        BigSigma = np.dot(3,BigSigma)\n",
        "    else:\n",
        "        BigSigma = np.dot(200,BigSigma)\n",
        "    ##print (\"BigSigma Generated..\")\n",
        "    return BigSigma\n",
        "\n",
        "def GetScalar(DataRow,MuRow, BigSigInv):  \n",
        "    R = np.subtract(DataRow,MuRow)\n",
        "    T = np.dot(BigSigInv,np.transpose(R))  \n",
        "    L = np.dot(R,T)\n",
        "    return L\n",
        "\n",
        "def GetRadialBasisOut(DataRow,MuRow, BigSigInv):    \n",
        "    phi_x = math.exp(-0.5*GetScalar(DataRow,MuRow,BigSigInv))\n",
        "    return phi_x\n",
        "\n",
        "def GetPhiMatrix(Data, MuMatrix, BigSigma, TrainingPercent = 80):\n",
        "    DataT = np.transpose(Data)\n",
        "    TrainingLen = math.ceil(len(DataT)*(TrainingPercent*0.01))         \n",
        "    PHI = np.zeros((int(TrainingLen),len(MuMatrix))) \n",
        "    BigSigInv = np.linalg.inv(BigSigma)\n",
        "    for  C in range(0,len(MuMatrix)):\n",
        "        for R in range(0,int(TrainingLen)):\n",
        "            PHI[R][C] = GetRadialBasisOut(DataT[R], MuMatrix[C], BigSigInv)\n",
        "    #print (\"PHI Generated..\")\n",
        "    return PHI\n",
        "\n",
        "def GetWeightsClosedForm(PHI, T, Lambda):\n",
        "    Lambda_I = np.identity(len(PHI[0]))\n",
        "    for i in range(0,len(PHI[0])):\n",
        "        Lambda_I[i][i] = Lambda\n",
        "    PHI_T       = np.transpose(PHI)\n",
        "    PHI_SQR     = np.dot(PHI_T,PHI)\n",
        "    PHI_SQR_LI  = np.add(Lambda_I,PHI_SQR)\n",
        "    PHI_SQR_INV = np.linalg.inv(PHI_SQR_LI)\n",
        "    INTER       = np.dot(PHI_SQR_INV, PHI_T)\n",
        "    W           = np.dot(INTER, T)\n",
        "    ##print (\"Training Weights Generated..\")\n",
        "    return W\n",
        "\n",
        "def GetPhiMatrix(Data, MuMatrix, BigSigma, TrainingPercent = 80):\n",
        "    DataT = np.transpose(Data)\n",
        "    TrainingLen = math.ceil(len(DataT)*(TrainingPercent*0.01))         \n",
        "    PHI = np.zeros((int(TrainingLen),len(MuMatrix))) \n",
        "    BigSigInv = np.linalg.pinv(BigSigma)\n",
        "    for  C in range(0,len(MuMatrix)):\n",
        "        for R in range(0,int(TrainingLen)):\n",
        "            PHI[R][C] = GetRadialBasisOut(DataT[R], MuMatrix[C], BigSigInv)\n",
        "    #print (\"PHI Generated..\")\n",
        "    return PHI\n",
        "\n",
        "def GetValTest(VAL_PHI,W):\n",
        "    Y = np.dot(W,np.transpose(VAL_PHI))\n",
        "    ##print (\"Test Out Generated..\")\n",
        "    return Y\n",
        "\n",
        "def GetErms(VAL_TEST_OUT,ValDataAct):\n",
        "    sum = 0.0\n",
        "    t=0\n",
        "    accuracy = 0.0\n",
        "    counter = 0\n",
        "    val = 0.0\n",
        "    for i in range (0,len(VAL_TEST_OUT)):\n",
        "        sum = sum + math.pow((ValDataAct[i] - VAL_TEST_OUT[i]),2)\n",
        "        if(int(np.around(VAL_TEST_OUT[i], 0)) == ValDataAct[i]):\n",
        "            counter+=1\n",
        "    accuracy = (float((counter*100))/float(len(VAL_TEST_OUT)))\n",
        "    ##print (\"Accuracy Generated..\")\n",
        "    ##print (\"Validation E_RMS : \" + str(math.sqrt(sum/len(VAL_TEST_OUT))))\n",
        "    return (str(accuracy) + ',' +  str(math.sqrt(sum/len(VAL_TEST_OUT))))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "LIZWt3vDpsuT",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## main()"
      ]
    },
    {
      "metadata": {
        "id": "2zXyT1T964c8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "outputId": "aeabd7b2-498c-4476-a2fb-bd60ac8a9e5a"
      },
      "cell_type": "code",
      "source": [
        "'''\n",
        "ConGSCRawTarget = GetTargetVector('gscTarget.csv')\n",
        "ConGSCRawData   = GenerateRawData('gscInput.csv')\n",
        "ConGSCRawData=np.array(ConGSCRawData)\n",
        "ConGSCRawTarget=np.array(ConGSCRawTarget)\n",
        "\n",
        "SubGSCRawTarget = GetTargetVector('gscTarget.csv')\n",
        "SubGSCRawData   = GenerateRawData('gscSubtract.csv')\n",
        "SubGSCRawData=np.array(SubGSCRawData)\n",
        "SubGSCRawTarget=np.array(SubGSCRawTarget)\n",
        "\n",
        "SubHumanObsTarget=GetTargetVector('allDataSubtractTarget.csv')\n",
        "SubHumanObsData=GenerateRawData('allDataSubtractInput.csv')\n",
        "SubHumanObsData=np.array(SubHumanObsData)\n",
        "SubHumanObsTarget=np.array(SubHumanObsTarget)\n",
        "'''\n",
        "ConHumanObsTarget=GetTargetVector('allDataConcatTarget.csv')\n",
        "ConHumanObsData=GenerateRawData('allDataConcatInput.csv')\n",
        "ConHumanObsData=np.array(ConHumanObsData)\n",
        "ConHumanObsTarget=np.array(ConHumanObsTarget)\n",
        "print(ConHumanObsData.shape)\n",
        "print ('UBITname      = vineetsu')\n",
        "print ('Person Number = 50291159')\n",
        "print ('----------------------------------------------------')\n",
        "print (\"------------------Handwriting CEDAR Data--------------------\")\n",
        "print ('----------------------------------------------------')\n",
        "print (\"---Gradient Descent with Radial Basis Function-------\")\n",
        "print ('----------------------------------------------------')\n",
        "#print (\"E_rms Testing for GSC Concatenated Dataset = \" + gradDescentLinearReg(ConGSCRawData,ConGSCRawTarget,batch_percent=0.1))\n",
        "#print (\"E_rms Testing for GSC Subracted Dataset = \" + gradDescentLinearReg(SubGSCRawData,SubGSCRawTarget,batch_percent=0.1))\n",
        "print (\"E_rms Testing for Human Observed Concatenated Dataset = \" + gradDescentLinearReg(ConHumanObsData,ConHumanObsTarget,batch_percent=0.1))\n",
        "print (\"E_rms Testing for Human Observerd Subtracted Dataset = \" + gradDescentLinearReg(SubHumanObsData,SubHumanObsTarget,batch_percent=0.1))"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: DeprecationWarning: 'U' mode is deprecated\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: DeprecationWarning: 'U' mode is deprecated\n",
            "  \n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-821425ceeb55>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m '''\n\u001b[1;32m     17\u001b[0m \u001b[0mConHumanObsTarget\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mGetTargetVector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'allDataConcatTarget.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mConHumanObsData\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mGenerateRawData\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'allDataConcatInput.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0mConHumanObsData\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mConHumanObsData\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0mConHumanObsTarget\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mConHumanObsTarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-6-77ef124ec654>\u001b[0m in \u001b[0;36mGenerateRawData\u001b[0;34m(filePath, IsSynthetic)\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0mreader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcsv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m         \u001b[0mi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mrow\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m             \u001b[0mdataRow\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mcolumn\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrow\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "metadata": {
        "id": "jevt9GekWFjU",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "##  Gradient Descent Linear regression"
      ]
    },
    {
      "metadata": {
        "id": "LDRcLoLxpsuU",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def gradDescentLinearReg(RawData1,RawTarget1,batch_percent=0.1):\n",
        "  \n",
        "  batch_size=int(RawData1.shape[1]*batch_percent)\n",
        "  #print(batch_size)\n",
        "  it=0\n",
        "  IsSynthetic=False\n",
        "  M=8\n",
        "  maxAcc = 0.0\n",
        "  maxIter = 0\n",
        "  C_Lambda = 0.03\n",
        "  TrainingPercent = 80\n",
        "  ValidationPercent = 10\n",
        "  TestPercent = 10\n",
        "  M = 8\n",
        "  PHI = []\n",
        "  IsSynthetic = False\n",
        "  learning_rate=0.1\n",
        "  La=0.5\n",
        "  W=np.zeros(M)\n",
        "  while it+batch_size<=RawData1.shape[1]:\n",
        "    \n",
        "    RawData=RawData1[:,it:it+batch_size]\n",
        "    RawTarget=RawTarget1[it:it+batch_size]\n",
        "    #print(RawData.shape)\n",
        "    it=it+batch_size\n",
        "    TrainingTarget = np.array(GenerateTrainingTarget(RawTarget,TrainingPercent))\n",
        "    TrainingData   = GenerateTrainingDataMatrix(RawData,TrainingPercent)\n",
        "\n",
        "    ValDataAct = np.array(GenerateValTargetVector(RawTarget,ValidationPercent, (len(TrainingTarget))))\n",
        "    ValData    = GenerateValData(RawData,ValidationPercent, (len(TrainingTarget)))\n",
        "\n",
        "    TestDataAct = np.array(GenerateValTargetVector(RawTarget,TestPercent, (len(TrainingTarget)+len(ValDataAct))))\n",
        "    TestData = GenerateValData(RawData,TestPercent, (len(TrainingTarget)+len(ValDataAct)))\n",
        "\n",
        "    ErmsArr = []\n",
        "    AccuracyArr = []\n",
        "\n",
        "    kmeans = KMeans(n_clusters=M, random_state=0).fit(np.transpose(TrainingData))\n",
        "    Mu = kmeans.cluster_centers_\n",
        "\n",
        "    BigSigma     = GenerateBigSigma(RawData, Mu, TrainingPercent,IsSynthetic)\n",
        "    TRAINING_PHI = GetPhiMatrix(RawData, Mu, BigSigma, TrainingPercent)\n",
        "\n",
        "    TEST_PHI     = GetPhiMatrix(TestData, Mu, BigSigma, 100) \n",
        "    VAL_PHI      = GetPhiMatrix(ValData, Mu, BigSigma, 100)\n",
        "    W_Now        = np.dot(220, W)\n",
        "    La           = 0.5\n",
        "    learningRate = 0.2\n",
        "    L_Erms_Val   = []\n",
        "    L_Erms_TR    = []\n",
        "    L_Erms_Test  = []\n",
        "    W_Mat        = []\n",
        "\n",
        "    for i in range(0,10):\n",
        "\n",
        "\n",
        "        #print ('---------Iteration: ' + str(i) + '--------------')\n",
        "        Delta_E_D     = -np.dot((TrainingTarget[i] - np.dot(np.transpose(W_Now),TRAINING_PHI[i])),TRAINING_PHI[i])\n",
        "        La_Delta_E_W  = np.dot(La,W_Now)\n",
        "        Delta_E       = np.add(Delta_E_D,La_Delta_E_W)    \n",
        "        Delta_W       = -np.dot(learningRate,Delta_E)\n",
        "        W_T_Next      = W_Now + Delta_W\n",
        "        W_Now         = W_T_Next\n",
        "\n",
        "\n",
        "\n",
        "        #-----------------ValidationData Accuracy---------------------#\n",
        "        VAL_TEST_OUT  = GetValTest(VAL_PHI,W_T_Next) \n",
        "        Erms_Val      = GetErms(VAL_TEST_OUT,ValDataAct)\n",
        "        L_Erms_Val.append(float(Erms_Val.split(',')[1]))\n",
        "    #print(\"Current Batch Start index: \",it,\"E_rms Validation = \" + str(np.around(min(L_Erms_Val),5)))\n",
        "     \n",
        "  #print(\"FINAL RESULT...........\")\n",
        "  #TR_TEST_OUT  = GetValTest(TRAINING_PHI,W)\n",
        "  VAL_TEST_OUT = GetValTest(VAL_PHI,W)\n",
        "  TEST_OUT     = GetValTest(TEST_PHI,W)\n",
        "\n",
        "  #TrainingAccuracy   = str(GetErms(TR_TEST_OUT,TrainingTarget))\n",
        "  ValidationAccuracy = str(GetErms(VAL_TEST_OUT,ValDataAct))\n",
        "  TestAccuracy       = str(GetErms(TEST_OUT,TestDataAct))\n",
        "  return TestAccuracy"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}